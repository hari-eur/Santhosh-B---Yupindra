Mentee Training:
----------------
Test - 24/02/2023:
------------------
Operator syllabus:
-------------------
#include<stdio.h>
int main(){
	int i = 16;
	i =! i > 15;
	printf("i = %d",i);
	return 0;
}

A. 16
B. 1
C. 0
D. Compilation Error

Answer: C. 0

Reason: Three operators =, ! and > are in the expression. The order of decreasing priority is !, >, =.  And ! operator is right to left associative. Thus !16 becomes 0.

#include<stdio.h>
int main()
{
	int i = 5;
	int a = ++i + ++i;
	printf("%d",a);
	return 0;
}

A. 14
B. 13
C. 12
D. 11

Answer: A.  14

Reason: The operators of decresing priority in the equation are pre-increment, + and =. In the first pre increment i is incremented to 6 but not assigned then the second increment is done and is assigned as 7 to both places. Thus, 7+7 = 14.

#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i + --i;
	printf("%d",a);
	return 0;
}

A. 8
B. 5
C. 7
D. 6

Answer: D. 6

Reason: The operators of decresing priority in the equation are pre-decrement, + and =. In the first pre decrement i is changed to 4 but not assigned then the second decrement is done and is assigned as 3 to both places. Thus, 3+3 = 6.


#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i - --i - --i - --i;
	printf("%d",a);
	return 0;
}

A. 2 
B. -3
C. -1
D. -4

Answer: B. -3

Reason: The operators in decreasing precedence are pre decrement, - and =. Expression is evaluated left to right. The first two --i are evauated first in the scope of the binary minus. So in the first decrement i changes to 4 but not assigned. Next decrement, i changes to 3 and assigned in both places. Now we get 3-3 =0. The expression now becomes 0 - --i - --i. Then in the third decrement value 2 is assigned 0 - 2 - --i. In the final --i, we get -2 - 1 = -3 

#include<stdio.h>
int main()
{
	int i = 5;
	int a = --i + ++i - i-- + --i;
	printf("%d",a);
	return 0;
}

A. 7
B. 9
C. 8
D. 10

Answer: C. 8

Reason: The operators in decreasing precedence are post decrement, pre decrement and pre increment, - and =. Expression is evaluated left to right. There a 3 pre operations larger than the number of post operations which nullifies its precedence. The first two --i and ++i are evauated first in the scope of the binary plus. So in the first decrement i changes to 4 but not assigned. Next increment, i changes to 5 and assigned in both places. Now we get 5+5 = 10. The expression now becomes 10 - i-- - --i. Then in the third decrement value 4 is not assigned as it is a post decrement 10 - 5 + --i with i = 4. In the final --i, we get 10 - 5 + 3 = 8 

#include<stdio.h>
int main()
{
	int a;
	a = (1, 2, 3);
	printf("%d", a);
	return 0;
}

A. 1
B. 2
C. 3
D. Compilation Error


#include<stdio.h>
int main()
{
	unsigned int num = -4;
	printf("%d", ~num);
	return 0;
}

A. 4
B. Compilation Error
C. Some Garbage Value
D. 3

#include<stdio.h>
int main()
{
	int a = 7, b = 4, c = 2;
	printf("%d\n", a|b&c);
	return 0;
}

A. 3
B. 8
C. 6
D. 7

#include<stdio.h>
int main()
{
	printf("%d",3 * 2--);
}

A. 3
B. 9
C. 6 
D. Compilation Error

#include<stdio.h>
	#define x =
int main()
{
	int a;
	a x 5;
	printf("%d",a);
	return 0;
}

A. Compilation Error
B. Runtime Error
C. 5
D. Program incomplete

#include<stdio.h>
int main()
{
 int a = 5;
 a = printf("HiHalo"), printf("World"), 9;
 printf("%d", a);
 return 0;
}

A. Compilation Error
B. HiHaloWorld6
C. HiHaloWorld9
D. 9

#include <stdio.h>
int main(void) {
    int a=3;
    a = (1, printf("Hi"),printf("world"),3);
    printf("%d",a);
    return 0;
}

A. Compilation Error
B. Hiworld3
C. 1Hiworld
D. Hiworld1

#include <stdio.h>
int main(void) {
    
    int i=0, j=0, k=2, n=0;
    n = i++ && ++j || k++;
    printf("%d %d %d %d",n,i,j,k);
    return 0;
}

A. 0 1 1 2
B. 1 1 1 3
C. 1 1 0 3
D. 1 0 1 2

#include <stdio.h>
int main(void) {
    
    int i=0, j=0, k=2, n=0;
    n = ++i || ++j && k++;
    printf("%d %d %d %d",n,i,j,k);
    return 0;
}

A. 1 1 1 3
B. 1 1 0 2
C. 1 1 0 3
D. 0 1 0 2

#include<stdio.h>
int main()
{
	unsigned char num = 265;
	num = num + 1;
	printf("%d", num);
	return 0;
}

A. Compilation Error 
B. 266
C. 10
D. 136
